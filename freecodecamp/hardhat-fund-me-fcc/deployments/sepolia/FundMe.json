{
  "address": "0x7817CA56B753bdec4ceb1C67B62CC6Ce42A36816",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26609f77c6c6cd8431447cbdc762ea78ab6bcc2639210dfb1116f924439e717d",
  "receipt": {
    "to": null,
    "from": "0x3B4c12339A246eDfe8c6CFE084A7807BaD0E51d4",
    "contractAddress": "0x7817CA56B753bdec4ceb1C67B62CC6Ce42A36816",
    "transactionIndex": 36,
    "gasUsed": "966241",
    "logsBloom": "0x
    "blockHash": "0xc2e90b8f72f159bbf9c213546cd79a1ff009d2dabe05b809e1877a70b0816959",
    "transactionHash": "0x26609f77c6c6cd8431447cbdc762ea78ab6bcc2639210dfb1116f924439e717d",
    "logs": [],
    "blockNumber": 6218815,
    "cumulativeGasUsed": "6903951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "0eea0350de44ccfdd6b7c32f07af42f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Manajit Halder\",\"details\":\"All functions are currently implemented without side effects.\",\"errors\":{\"FundMe__NotOwner()\":[{\"details\":\"This error is thorwn if withdraw function is called otherthan owner\"}]},\"kind\":\"dev\",\"methods\":{\"cheaperWithdraw()\":{\"details\":\"Withdraws fund from all funders and empty their fund\"},\"fund()\":{\"details\":\"Function maintain funders list\"},\"withdraw()\":{\"details\":\"Withdraws fund from all funders and empty their fund\"}},\"title\":\"A contract for crown funding\",\"version\":1},\"userdoc\":{\"errors\":{\"FundMe__NotOwner()\":[{\"notice\":\"Checks to make sure that msg.sender is owner\"}]},\"kind\":\"user\",\"methods\":{\"cheaperWithdraw()\":{\"notice\":\"Withdraw fund only by owner (optimized storage usage)\"},\"fund()\":{\"notice\":\"This function receives fund from anyone\"},\"withdraw()\":{\"notice\":\"Withdraw fund only by owner\"}},\"notice\":\"This contract is to demo a sample crowd funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @notice Checks to make sure that msg.sender is owner\\n * @dev This error is thorwn if withdraw function is called otherthan owner\\n */\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crown funding\\n *  @author Manajit Halder\\n *  @notice This contract is to demo a sample crowd funding contract\\n *  @dev All functions are currently implemented without side effects.\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {        \\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Only owner can withdraw fund\\\");\\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\\n        _;\\n    }\\n\\n    // /** @notice Receives fund when msg.data is empty\\n    //  *  @dev Called when no other function matches with contract function\\n    //  */\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // /** @notice Receives fund when msg.data is not empty\\n    //  *  @dev Called when no other function matches with contract function\\n    //  */\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /** @notice This function receives fund from anyone\\n     *  @dev Function maintain funders list\\n     */\\n    function fund() public payable {\\n        // Want to be able to set a minimum fund amount in USD\\n        // Send some ETH to this contract?\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"Didn't send enough ETH!\\\");\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    /** @notice Withdraw fund only by owner\\n     *  @dev Withdraws fund from all funders and empty their fund\\n     */\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the funders array\\n        s_funders = new address[](0);\\n\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"send failed\\\");\\n        // call \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    /** @notice Withdraw fund only by owner (optimized storage usage)\\n     *  @dev Withdraws fund from all funders and empty their fund\\n     */\\n    function cheaperWithdraw() public onlyOwner() {\\n        address[] memory funders = s_funders;\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; ++funderIndex) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success,) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xc829efd9f67cd9024107849d4181ae1426482eba136c7ed1a325a6d8213ecaef\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/** @title A contract for price conversion using CCIP price feed usign Sepolia testnet\\n *  @author Manajit Halder\\n *  @notice This contract is to calculate price feed using CCIP\\n *  @dev This calculates price feed\\n */\\nlibrary PriceConverter {\\n    /** @notice Receives priceFeed value using CCIP functions\\n     *  @dev priceFeed value is received for conversion between ETH and USD\\n     *  @param priceFeed current price of USD in ETH with 8 decimal places\\n     *  @return value of 1 eth in USD and converts the result to Wei \\n     */\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (\\n            /*uint80 roundId*/, \\n            int256 answer,\\n            /*uint256 startedAt*/,\\n            /*uint256 updatedAt*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        // answer is price of ETH in USD\\n        \\n        return uint256(answer * 1e10); // \\n    }\\n\\n    /** @notice Gets current version of AggregatorV3Interface\\n     *  @dev uses Sepolia testnet's address\\n     *  @return version ofAggregatorV3Interface \\n     */\\n    // function getVersion() internal view returns (uint256) {\\n    //     return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\\n    // }\\n\\n    /** @notice Converts ETH (Wei) to USD and returns result in ETH as wei\\n     *  @dev ethAmountInWei amount of Wei \\n     *  @param ethAmountInWei amount of Wei\\n     *  @param priceFeed instance of AggregatorV3Interface\\n     *  @return value of certain amount of USD coverted to Wei\\n     */\\n    function getConversionRate(uint256 ethAmountInWei /* ETH as WEI*/, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 weiInUSD = getPrice(priceFeed);\\n        uint256 weiAmountInUSD = (weiInUSD * ethAmountInWei) / 1e18;\\n\\n        return weiAmountInUSD;\\n    }\\n}\",\"keccak256\":\"0xd7ed7395ef5042dc150008da11280e156e37353a2aa5ff87e3e1bac362c32aa5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200119a3803806200119a83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161101a62000180600039600081816102450152818161048e015281816106190152610807015261101a6000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101b3565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b01565b6101fc565b6040516100f19190610b3d565b60405180910390f35b34801561010657600080fd5b5061010f610243565b005b34801561011d57600080fd5b5061012661047d565b6040516101339190610aba565b60405180910390f35b34801561014857600080fd5b5061015161048a565b60405161015e9190610b3d565b60405180910390f35b34801561017357600080fd5b5061017c6104b2565b6040516101899190610bb7565b60405180910390f35b61019a6104dc565b005b3480156101a857600080fd5b506101b1610617565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061021157610210610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561036d5760008082815481106102ed576102ec610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506102cb565b50600067ffffffffffffffff81111561038957610388610c01565b5b6040519080825280602002602001820160405280156103b75781602001602082028036833780820191505090505b50600090805190602001906103cd92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f490610c61565b60006040518083038185875af1925050503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b505090508061047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610cd3565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610d3f565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060e9190610d8e565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d5575b5050505050905060005b81518110156107a257600082828151811061074757610746610bd2565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050806001019050610729565b50600067ffffffffffffffff8111156107be576107bd610c01565b5b6040519080825280602002602001820160405280156107ec5781602001602082028036833780820191505090505b506000908051906020019061080292919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084990610c61565b60006040518083038185875af1925050503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b505090508061089957600080fd5b5050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610dc2565b6108cc9190610e33565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610ef1565b5050509150506402540be400816109629190610f6c565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610aa1565b8114610ae957600080fd5b50565b600081359050610afb81610ad5565b92915050565b600060208284031215610b1757610b16610a11565b5b6000610b2584828501610aec565b91505092915050565b610b3781610a36565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b6000819050919050565b6000610b7d610b78610b7384610a16565b610b58565b610a16565b9050919050565b6000610b8f82610b62565b9050919050565b6000610ba182610b84565b9050919050565b610bb181610b96565b82525050565b6000602082019050610bcc6000830184610ba8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c4b600083610c30565b9150610c5682610c3b565b600082019050919050565b6000610c6c82610c3e565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cbd600b83610c76565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b7f4469646e27742073656e6420656e6f7567682045544821000000000000000000600082015250565b6000610d29601783610c76565b9150610d3482610cf3565b602082019050919050565b60006020820190508181036000830152610d5881610d1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9982610aa1565b9150610da483610aa1565b9250828201905080821115610dbc57610dbb610d5f565b5b92915050565b6000610dcd82610aa1565b9150610dd883610aa1565b9250828202610de681610aa1565b91508282048414831517610dfd57610dfc610d5f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3e82610aa1565b9150610e4983610aa1565b925082610e5957610e58610e04565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e8381610e64565b8114610e8e57600080fd5b50565b600081519050610ea081610e7a565b92915050565b6000819050919050565b610eb981610ea6565b8114610ec457600080fd5b50565b600081519050610ed681610eb0565b92915050565b600081519050610eeb81610ad5565b92915050565b600080600080600060a08688031215610f0d57610f0c610a11565b5b6000610f1b88828901610e91565b9550506020610f2c88828901610ec7565b9450506040610f3d88828901610edc565b9350506060610f4e88828901610edc565b9250506080610f5f88828901610e91565b9150509295509295909350565b6000610f7782610ea6565b9150610f8283610ea6565b9250828202610f9081610ea6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fc857610fc7610d5f565b5b8282058414831517610fdd57610fdc610d5f565b5b509291505056fea2646970667358221220748a8a2826000dc56e456aebcc043f01dcdd63f8f9670de41c529f7c0ad956bc64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101b3565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b01565b6101fc565b6040516100f19190610b3d565b60405180910390f35b34801561010657600080fd5b5061010f610243565b005b34801561011d57600080fd5b5061012661047d565b6040516101339190610aba565b60405180910390f35b34801561014857600080fd5b5061015161048a565b60405161015e9190610b3d565b60405180910390f35b34801561017357600080fd5b5061017c6104b2565b6040516101899190610bb7565b60405180910390f35b61019a6104dc565b005b3480156101a857600080fd5b506101b1610617565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061021157610210610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561036d5760008082815481106102ed576102ec610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506102cb565b50600067ffffffffffffffff81111561038957610388610c01565b5b6040519080825280602002602001820160405280156103b75781602001602082028036833780820191505090505b50600090805190602001906103cd92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f490610c61565b60006040518083038185875af1925050503d8060008114610431576040519150601f19603f3d011682016040523d82523d6000602084013e610436565b606091505b505090508061047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610cd3565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061051b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610d3f565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060e9190610d8e565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d5575b5050505050905060005b81518110156107a257600082828151811061074757610746610bd2565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050806001019050610729565b50600067ffffffffffffffff8111156107be576107bd610c01565b5b6040519080825280602002602001820160405280156107ec5781602001602082028036833780820191505090505b506000908051906020019061080292919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084990610c61565b60006040518083038185875af1925050503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b505090508061089957600080fd5b5050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610dc2565b6108cc9190610e33565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610ef1565b5050509150506402540be400816109629190610f6c565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610aa1565b8114610ae957600080fd5b50565b600081359050610afb81610ad5565b92915050565b600060208284031215610b1757610b16610a11565b5b6000610b2584828501610aec565b91505092915050565b610b3781610a36565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b6000819050919050565b6000610b7d610b78610b7384610a16565b610b58565b610a16565b9050919050565b6000610b8f82610b62565b9050919050565b6000610ba182610b84565b9050919050565b610bb181610b96565b82525050565b6000602082019050610bcc6000830184610ba8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c4b600083610c30565b9150610c5682610c3b565b600082019050919050565b6000610c6c82610c3e565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cbd600b83610c76565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b7f4469646e27742073656e6420656e6f7567682045544821000000000000000000600082015250565b6000610d29601783610c76565b9150610d3482610cf3565b602082019050919050565b60006020820190508181036000830152610d5881610d1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9982610aa1565b9150610da483610aa1565b9250828201905080821115610dbc57610dbb610d5f565b5b92915050565b6000610dcd82610aa1565b9150610dd883610aa1565b9250828202610de681610aa1565b91508282048414831517610dfd57610dfc610d5f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3e82610aa1565b9150610e4983610aa1565b925082610e5957610e58610e04565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e8381610e64565b8114610e8e57600080fd5b50565b600081519050610ea081610e7a565b92915050565b6000819050919050565b610eb981610ea6565b8114610ec457600080fd5b50565b600081519050610ed681610eb0565b92915050565b600081519050610eeb81610ad5565b92915050565b600080600080600060a08688031215610f0d57610f0c610a11565b5b6000610f1b88828901610e91565b9550506020610f2c88828901610ec7565b9450506040610f3d88828901610edc565b9350506060610f4e88828901610edc565b9250506080610f5f88828901610e91565b9150509295509295909350565b6000610f7782610ea6565b9150610f8283610ea6565b9250828202610f9081610ea6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fc857610fc7610d5f565b5b8282058414831517610fdd57610fdc610d5f565b5b509291505056fea2646970667358221220748a8a2826000dc56e456aebcc043f01dcdd63f8f9670de41c529f7c0ad956bc64736f6c63430008180033",
  "devdoc": {
    "author": "Manajit Halder",
    "details": "All functions are currently implemented without side effects.",
    "errors": {
      "FundMe__NotOwner()": [
        {
          "details": "This error is thorwn if withdraw function is called otherthan owner"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cheaperWithdraw()": {
        "details": "Withdraws fund from all funders and empty their fund"
      },
      "fund()": {
        "details": "Function maintain funders list"
      },
      "withdraw()": {
        "details": "Withdraws fund from all funders and empty their fund"
      }
    },
    "title": "A contract for crown funding",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FundMe__NotOwner()": [
        {
          "notice": "Checks to make sure that msg.sender is owner"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "cheaperWithdraw()": {
        "notice": "Withdraw fund only by owner (optimized storage usage)"
      },
      "fund()": {
        "notice": "This function receives fund from anyone"
      },
      "withdraw()": {
        "notice": "Withdraw fund only by owner"
      }
    },
    "notice": "This contract is to demo a sample crowd funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 331,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 338,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}