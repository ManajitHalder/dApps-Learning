{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @notice Checks to make sure that msg.sender is owner\n * @dev This error is thorwn if withdraw function is called otherthan owner\n */\nerror FundMe__NotOwner();\n\n/** @title A contract for crown funding\n *  @author Manajit Halder\n *  @notice This contract is to demo a sample crowd funding contract\n *  @dev All functions are currently implemented without side effects.\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address public immutable i_owner;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {        \n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Only owner can call this function\");\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\n        _;\n    }\n\n    /** @notice Receives fund when msg.data is empty\n     *  @dev Called when no other function matches with contract function\n     */\n    receive() external payable {\n        fund();\n    }\n\n    /** @notice Receives fund when msg.data is not empty\n     *  @dev Called when no other function matches with contract function\n     */\n    fallback() external payable {\n        fund();\n    }\n\n    /** @notice This function receives fund from anyone\n     *  @dev Function maintain funders list\n     */\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount in USD\n        // Send some ETH to this contract?\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough!\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    /** @notice Withdraw fund only by owner\n     *  @dev Withdraws fund from all funders and empty their fund\n     */\n    function withdraw() public onlyOwner {\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the funders array\n        funders = new address[](0);\n\n        // // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"send failed\");\n        // call \n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n/** @title A contract for price conversion using CCIP price feed usign Sepolia testnet\n *  @author Manajit Halder\n *  @notice This contract is to calculate price feed using CCIP\n *  @dev This calculates price feed\n */\nlibrary PriceConverter {\n    /** @notice Receives priceFeed value using CCIP functions\n     *  @dev priceFeed value is received for conversion between ETH and USD\n     *  @param priceFeed current price of USD in ETH with 8 decimal places\n     *  @return value of 1 eth in USD and converts the result to Wei \n     */\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (\n            /*uint80 roundId*/, \n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        // answer is price of ETH in USD\n        \n        return uint256(answer * 1e10); // \n    }\n\n    /** @notice Gets current version of AggregatorV3Interface\n     *  @dev uses Sepolia testnet's address\n     *  @return version ofAggregatorV3Interface \n     */\n    function getVersion() internal view returns (uint256) {\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\n    }\n\n    /** @notice Converts ETH (Wei) to USD and returns result in ETH as wei\n     *  @dev ethAmountInWei amount of Wei \n     *  @param ethAmountInWei amount of Wei\n     *  @param priceFeed instance of AggregatorV3Interface\n     *  @return value of certain amount of USD coverted to Wei\n     */\n    function getConversionRate(uint256 ethAmountInWei /* ETH as WEI*/, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 weiInUSD = getPrice(priceFeed);\n        uint256 weiAmountInUSD = (weiInUSD * ethAmountInWei) / 1e18;\n\n        return weiAmountInUSD;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}